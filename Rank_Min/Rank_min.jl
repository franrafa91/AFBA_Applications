using LinearAlgebra
using ProximalAlgorithms
using ProximalOperators

#With 0.1 Noise #IN MATLAB
b₂ = [0.929493932436651, 0.0663366640516890, -0.659800663040562, -0.618826116586924, -0.174919468706439, 0.563109812870338, 0.448972944539084, 0.0830422151567688, -0.365805461800296, -0.218133133915710, 0.0891427777939436, 0.406453085322704, 0.384798455360949, 0.0710762719147541, -0.193998250514231, -0.105497764593557, -0.284218519521583, 0.0998759174800447, 0.170319356836481, 0.0869887250577018, -0.316710826960521, -0.340008176668079, 0.0889829273099628, 0.0859798442695906, 0.0664890194532654, 0.000518342317220242, -0.0303925572007856];

#4th order system with 0.1 Noise #IN MATLAB
b₄ = [0.00401557284587662, 0.913026332837551, -0.115421539802584, -0.683322060485645, -0.0414096206667291, -0.0508412753483633, 0.0382194374822677, 0.400593647566248, -0.235005811613336, -0.139739339238354, -0.116310116698392, 0.0155445833083502, 0.316684805757508, 0.0425541582875782, -0.293326406641291, 0.0500193637764752, -0.136463856377924, -0.0795010767747800, 0.00140345744847949, 0.0811885485587010, -0.112995679452976, -0.0210383033982032, -0.197442292264161, 0.0287629245141421, 0.0259751593680660, -0.173447182345009, -0.110824288643139];


# If the matrix is PSD, the minimization of the trace can be used
include("Hkl.jl")
L = Hkls.Hkl()

b = b₄;
A = L*b;

θ = 2; μ = 1; iter = 0;

#With Indicator Ball
σ = 0.1
τ = 1.0
β = 1.0

f = Postcompose(Translate(NormL2(1.0),-b),β/2,0);
g = Translate(IndBallL2(0.1),-b)
ϵ = 0*b.+0.3;
g_mod = Translate(IndBox(-ϵ,ϵ),-b)
h = NuclearNorm(1.0)

x₀ = b;
y₀= prox(ProximalAlgorithms.convex_conjugate(h),(1+σ)*L*b)[1];

solver = ProximalAlgorithms.AFBA(theta = θ, mu = μ, tol = Float64(1e-10), maxit=20000)
(x_afba, y_afba), iter = solver(x0 = x₀, y0 = y₀, f=f, beta_f=β, g=g_mod, h=h, L=L, gamma = (τ,σ))

cost(x) = f(x) + h(L*x);
iter
rank(A,1e-3)
cost(b)

rank(L*x_afba,1e-3)
cost(x_afba)

print(svd(A).S)
print(svd(L*x_afba).S)

print(x_afba)